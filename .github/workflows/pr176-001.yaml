###############################################################
#
## Copyright (©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 23-OCT-2025 at 2100 EDT
#
#
#
## Intent: PR176
#
## TODO:  
#
#
###############################################################

name: PR176

on:
  workflow_dispatch:

jobs:
  build:
    name: "${{ matrix.os }} • ${{ matrix.compiler }} • ${{ matrix.build_type }}"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        build_type: [Release, Debug]
        exclude:
          - os: macos-latest
            compiler: gcc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prep log/artifact workspace
        run: |
          set -euo pipefail
          mkdir -p artifacts
          echo "ARTIFACT_PREFIX=cmake-branch-CTest-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}" >> "$GITHUB_ENV"
      # ---------- Linux ----------
      - name: Install Dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake gcc g++ clang clang-tools \
            libpng-dev libxml2 libxml2-dev libtiff-dev \
            nlohmann-json3-dev libwxgtk3.2-dev wx-common \
            python3 python3-pip curl git llvm zsh
      - name: Set Compiler (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          set -euo pipefail
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc"  >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang"   >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: Print Compiler Version (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Compiler Version:" >> $GITHUB_STEP_SUMMARY
          $CC --version >> $GITHUB_STEP_SUMMARY
      - name: Configure & Build (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          set -euxo pipefail
          git clone https://github.com/InternationalColorConsortium/iccDEV.git
          cd iccDEV
          git checkout pr176
          git branch
          git status
          cd Build
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DENABLE_TOOLS=ON \
                -DENABLE_STATIC_LIBS=ON \
                -DENABLE_SHARED_LIBS=ON \
                -Wno-dev Cmake/
          make -j"$(nproc)"
          find . -type f \( -perm -111 -o -name "*.a" -o -name "*.so" -o -name "*.dylib" \) \
            -mmin -1440 ! -path "*/.git/*" ! -path "*/CMakeFiles/*" ! -name "*.sh" -print
          cd ..
          pwd
      - name: Run CTest (Linux)
        if: ${{ runner.os == 'Linux' }}
        continue-on-error: true
        run: |
          set -euxo pipefail
          cd iccdev/Build || exit 0
          ctest --output-on-failure || true
          cp -f Testing/Temporary/LastTest.log ../../artifacts/LastTest-linux.log 2>/dev/null || true
      # ---------- macOS ----------
      - name: Clone repository and install dependencies (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "📥 Cloning iccdev repository..."
          git clone https://github.com/InternationalColorConsortium/iccDEV.git
          cd iccDEV
          git checkout pr176
          git branch
          git status
          echo "📦 Installing Homebrew dependencies..."
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg zlib || echo "⚠️ Some dependencies might already be installed."
          echo "✔ Dependency installation complete."
      - name: Print Compiler Version (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "Compiler Version:" >> $GITHUB_STEP_SUMMARY
          clang --version >> $GITHUB_STEP_SUMMARY
      - name: Configure & Build (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "⚙️ Setting up CMake build configuration..."
          mkdir -p iccdev/Build
          cd iccdev/Build
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h || true
          echo 'export PATH="/opt/homebrew/opt/jpeg/bin:$PATH"' >> /Users/runner/.bash_profile
          export PATH="/opt/homebrew/opt/jpeg/bin:$PATH"
          export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include ${CPPFLAGS}"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include ${CFLAGS}"
          export CXXFLAGS="${CXXFLAGS}"
          export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib ${LDFLAGS}"
          export CPATH="$(brew --prefix nlohmann-json)/include:$(brew --prefix libpng)/include:$(brew --prefix zlib)/include:${CPATH}"
          export CPLUS_INCLUDE_PATH="$(brew --prefix nlohmann-json)/include:${CPLUS_INCLUDE_PATH}"
          export LIBRARY_PATH="$(brew --prefix libpng)/lib:$(brew --prefix zlib)/lib:${LIBRARY_PATH}"
          cmake -S Cmake -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX="$HOME/.local" \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_PREFIX_PATH="$(brew --prefix libpng);$(brew --prefix zlib);$(brew --prefix jpeg);$(brew --prefix nlohmann-json)" \
            -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DPNG_PNG_INCLUDE_DIR="$(brew --prefix libpng)/include" \
            -DPNG_LIBRARY="$(brew --prefix libpng)/lib/libpng16.dylib" \
            -DZLIB_INCLUDE_DIR="$(brew --prefix zlib)/include" \
            -DZLIB_LIBRARY="$(brew --prefix zlib)/lib/libz.dylib" \
            -DJPEG_INCLUDE_DIR="$(brew --prefix jpeg)/include" \
            -DJPEG_LIBRARY="$(brew --prefix jpeg)/lib/libjpeg.dylib" \
            -DENABLE_TOOLS=ON -DENABLE_STATIC_LIBS=ON -DENABLE_SHARED_LIBS=ON -Wno-dev
          make -j$(sysctl -n hw.ncpu)
          find . -type f \( -perm -111 -o -name "*.a" -o -name "*.so" -o -name "*.dylib" \) \
            -mmin -1440 ! -path "*/.git/*" ! -path "*/CMakeFiles/*" ! -name "*.sh" -print
          find . -type f '(' -perm -111 -o -name '*.dylib' -o -name '*.so' ')' ! -path '*/.git/*' ! -path '*/CMakeFiles/*' -exec otool -L {} +
          cd ..
          pwd
          echo "✔ Build process completed."
      - name: Run CTest (macOS)
        if: ${{ runner.os == 'macOS' }}
        continue-on-error: true
        run: |
          set -euxo pipefail
          cd iccdev/Build || exit 0
          ctest --output-on-failure || true
          cp -f Testing/Temporary/LastTest.log ../../artifacts/LastTest-macos.log 2>/dev/null || true
      # ---------- Artifacts & Debug Aids ----------
      - name: Collect key logs
        if: always()
        run: |
          set -euo pipefail
          find iccdev -type f \( -name CMakeOutput.log -o -name CMakeError.log \) -exec cp -f {} artifacts/ \; 2>/dev/null || true
          cp -f iccdev/Build/*build_report*.html artifacts/ 2>/dev/null || true
          cp -f linux_build_report.html artifacts/ 2>/dev/null || true
          cp -f iccmax_build_report.html artifacts/ 2>/dev/null || true
          { echo "# Binary Index"; \
            echo "Generated on $(date -u)"; \
            echo; \
            find iccdev/Build -type f \( -perm -111 -o -name '*.a' -o -name '*.so' -o -name '*.dylib' \) ! -path '*/CMakeFiles/*' -print; } > artifacts/BINARY_INDEX.txt 2>/dev/null || true
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}
          if-no-files-found: warn
          retention-days: 14
          compression-level: 6
          path: |
            artifacts/**
            iccdev/Build/**/*.a
            iccdev/Build/**/*.so
            iccdev/Build/**/*.dylib
            iccdev/Build/**/bin/**
            iccdev/Build/**/lib/**
            iccdev/Build/Testing/Temporary/LastTest.log
            linux_build_report.html
            iccmax_build_report.html
      # ---------- Summary ----------
      - name: Summary Report
        if: always()
        run: |
          echo "### Build Summary (${{ matrix.os }} • ${{ matrix.compiler }} • ${{ matrix.build_type }})" >> $GITHUB_STEP_SUMMARY
          echo "- OS: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Compiler: ${{ matrix.compiler }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ matrix.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Directory: iccdev/Build/" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts: ${{ env.ARTIFACT_PREFIX }}" >> $GITHUB_STEP_SUMMARY
          test -f artifacts/LastTest-linux.log && echo "- CTest (Linux): attached" >> $GITHUB_STEP_SUMMARY || true
          test -f artifacts/LastTest-macos.log && echo "- CTest (macOS): attached" >> $GITHUB_STEP_SUMMARY || true
